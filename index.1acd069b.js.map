{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCIA,IAAI,EAAQ,EAAE,CACV,EAAQ,EACR,EAAQ,CAAA,EACN,EAAQ,SAAS,gBAAgB,CAAC,eAClC,EAAc,SAAS,cAAc,CAAC,gBACtC,EAAc,CAAC,YAAa,aAAc,UAAW,YAAY,CACjE,EAAU,CACd,MAAO,SAAS,cAAc,CAAC,iBAC/B,KAAM,SAAS,cAAc,CAAC,gBAC9B,IAAK,SAAS,cAAc,CAAC,cAC/B,EAEA,EAAY,gBAAgB,CAAC,QAI7B,WACE,IACA,IACA,EAAe,GACf,EAAe,GACf,EAAU,EAAO,EACnB,GAEA,IAAM,EAAY,e,EAChB,EAAQ,EACR,EAAQ,CAAA,EACR,SAAS,aAAa,CAAC,eAAe,SAAS,CAAG,EAClD,EAAS,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAAG,MAAM,G,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,I,A,W,M,A,U,wI,G,EAAa,GAAG,CAAC,WAAM,MAAA,MAAM,CAAY,IAAI,CAAC,E,GAChE,EAAQ,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,SAC7B,EAEA,SAAS,EAAe,CAAU,EAChC,IAAM,EAAa,EAAE,CAMrB,GAJA,EAAW,OAAO,CAAC,SAAC,CAAA,CAAK,CAAzB,EAAsC,OAAA,EAAI,OAAO,CAAC,SAAC,CAAA,CAAO,CAApB,EACpC,AAAU,IAAV,GAAe,EAAW,IAAI,CAAC,CAAE,SAAA,EAAU,SAAA,CAAS,EACtD,E,GAEI,EAAW,MAAM,CAAG,EAAG,CACzB,IAAM,EAAc,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAC1D,EAAa,CAAU,CAAC,EAAY,AAE1C,C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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["/* eslint-disable object-curly-newline */ \"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar SIZE_BOARD = 4;\nvar board = [];\nvar score = 0;\nvar isWin = false;\nvar cells = document.querySelectorAll(\".field-cell\");\nvar startButton = document.getElementById(\"start-button\");\nvar allowedKeys = [\n    \"ArrowLeft\",\n    \"ArrowRight\",\n    \"ArrowUp\",\n    \"ArrowDown\"\n];\nvar message = {\n    Start: document.getElementById(\"message-start\"),\n    Lose: document.getElementById(\"message-lose\"),\n    Win: document.getElementById(\"message-win\")\n};\nstartButton.addEventListener(\"click\", startGame);\nvar isBoardFull = function(boardArr) {\n    return boardArr.every(function(r) {\n        return r.every(function(c) {\n            return c !== 0;\n        });\n    });\n};\nfunction startGame() {\n    resetGame();\n    changeButton();\n    addRandomField(board);\n    addRandomField(board);\n    drawBoard(board, cells);\n}\nvar resetGame = function() {\n    score = 0;\n    isWin = false;\n    document.querySelector(\".game-score\").innerText = score;\n    board = _to_consumable_array(Array(SIZE_BOARD)).map(function() {\n        return Array(SIZE_BOARD).fill(0);\n    });\n    message.Win.classList.add(\"hidden\");\n    message.Lose.classList.add(\"hidden\");\n};\nfunction addRandomField(boardArray) {\n    var emptyCells = [];\n    boardArray.forEach(function(row, rowIndex) {\n        return row.forEach(function(value, colIndex) {\n            value === 0 && emptyCells.push({\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            });\n        });\n    });\n    if (emptyCells.length > 0) {\n        var randomIndex = Math.floor(Math.random() * emptyCells.length);\n        var randomCell = emptyCells[randomIndex];\n        boardArray[randomCell.rowIndex][randomCell.colIndex] = Math.random() < 0.9 ? 2 : 4;\n    }\n}\nvar drawBoard = function(boardArray, curCells) {\n    boardArray.forEach(function(row, rowInd) {\n        return row.forEach(function(value, colInd) {\n            var cell = curCells[rowInd * boardArray.length + colInd];\n            if (value > 0) {\n                cell.textContent = value;\n                cell.classList = \"field-cell field-cell--\".concat(value);\n            } else {\n                cell.textContent = null;\n                cell.classList = \"field-cell\";\n            }\n        });\n    });\n};\nvar canMakeMove = function(boardArray) {\n    var canMove = false;\n    boardArray.forEach(function(row, rowInd) {\n        return row.forEach(function(value, colInd) {\n            if (value !== 0) {\n                if (rowInd < 3 && value === boardArray[rowInd + 1][colInd]) canMove = true;\n                if (colInd < 3 && value === boardArray[rowInd][colInd + 1]) canMove = true;\n            }\n        });\n    });\n    return canMove;\n};\nvar getWinMessage = function(boardArray) {\n    boardArray.forEach(function(row) {\n        return row.forEach(function(cell) {\n            if (cell >= 2048) {\n                isWin = true;\n                message.Start.classList.remove(\"hidden\");\n            }\n        });\n    });\n};\nvar getLoseMessage = function(boardArray) {\n    if (isBoardFull(boardArray) && !canMakeMove(boardArray)) message.Lose.classList.remove(\"hidden\");\n};\nvar changeButton = function() {\n    startButton.classList += \" restart\";\n    startButton.innerText = \"Restart\";\n    startButton.style = \"border: 2px solid red; color: #776e65; outline: none;\";\n    message.Start.classList.add(\"hidden\");\n};\ndocument.addEventListener(\"keyup\", function(e) {\n    if (!allowedKeys.includes(e.key) || isWin) return;\n    var prevBoard = JSON.parse(JSON.stringify(board));\n    switch(e.key){\n        case \"ArrowLeft\":\n            slideLeft();\n            getWinMessage(board);\n            getLoseMessage(board);\n            break;\n        case \"ArrowRight\":\n            slideRight();\n            getWinMessage(board);\n            getLoseMessage(board);\n            break;\n        case \"ArrowUp\":\n            slideUp();\n            getWinMessage(board);\n            getLoseMessage(board);\n            break;\n        case \"ArrowDown\":\n            slideDown();\n            getWinMessage(board);\n            getLoseMessage(board);\n            break;\n        default:\n            break;\n    }\n    document.querySelector(\".game-score\").innerText = score;\n    if (isMoved(prevBoard)) {\n        addRandomField(board);\n        drawBoard(board, cells);\n    }\n});\nvar isMoved = function(prevBoard) {\n    return prevBoard.some(function(prRow, rowInd) {\n        return prRow.some(function(prevCell, colInd) {\n            return prevCell !== board[rowInd][colInd];\n        });\n    });\n};\nvar deleteZeros = function(row) {\n    return row.filter(Boolean);\n};\nvar slide = function(row) {\n    var rowClear = deleteZeros(row);\n    var newRow = rowClear;\n    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        score += newRow[i];\n    }\n    newRow = deleteZeros(newRow);\n    while(newRow.length < 4)newRow.push(0);\n    return newRow;\n};\nvar slideLeft = function() {\n    board = board.map(function(row) {\n        return slide(row);\n    });\n};\nvar slideRight = function() {\n    board = board.map(function(row) {\n        return slide(row.reverse()).reverse();\n    });\n};\nvar getReversedBoard = function(boardArray) {\n    return boardArray.map(function(row, rowInd, boardArr) {\n        return row.map(function(_, colInd) {\n            return boardArr[colInd][rowInd];\n        });\n    });\n};\nvar slideUp = function() {\n    board = getReversedBoard(getReversedBoard(board).map(function(c) {\n        return slide(c);\n    }));\n};\nvar slideDown = function() {\n    board = getReversedBoard(getReversedBoard(board).map(function(r) {\n        return slide(r.reverse()).reverse();\n    }));\n};\n\n//# sourceMappingURL=index.1acd069b.js.map\n","/* eslint-disable object-curly-newline */\n'use strict';\n\nconst SIZE_BOARD = 4;\nlet board = [];\nlet score = 0;\nlet isWin = false;\nconst cells = document.querySelectorAll('.field-cell');\nconst startButton = document.getElementById('start-button');\nconst allowedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\nconst message = {\n  Start: document.getElementById('message-start'),\n  Lose: document.getElementById('message-lose'),\n  Win: document.getElementById('message-win'),\n};\n\nstartButton.addEventListener('click', startGame);\n\nconst isBoardFull = boardArr => boardArr.every(r => r.every(c => c !== 0));\n\nfunction startGame() {\n  resetGame();\n  changeButton();\n  addRandomField(board);\n  addRandomField(board);\n  drawBoard(board, cells);\n}\n\nconst resetGame = () => {\n  score = 0;\n  isWin = false;\n  document.querySelector('.game-score').innerText = score;\n  board = [...Array(SIZE_BOARD)].map(() => Array(SIZE_BOARD).fill(0));\n  message.Win.classList.add('hidden');\n  message.Lose.classList.add('hidden');\n};\n\nfunction addRandomField(boardArray) {\n  const emptyCells = [];\n\n  boardArray.forEach((row, rowIndex) => row.forEach((value, colIndex) => {\n    value === 0 && emptyCells.push({ rowIndex, colIndex });\n  }));\n\n  if (emptyCells.length > 0) {\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const randomCell = emptyCells[randomIndex];\n\n    boardArray[randomCell.rowIndex][randomCell.colIndex]\n      = Math.random() < 0.9 ? 2 : 4;\n  }\n}\n\nconst drawBoard = (boardArray, curCells) => {\n  boardArray.forEach((row, rowInd) => row.forEach((value, colInd) => {\n    const cell = curCells[rowInd * boardArray.length + colInd];\n\n    if (value > 0) {\n      cell.textContent = value;\n      cell.classList = `field-cell field-cell--${value}`;\n    } else {\n      cell.textContent = null;\n      cell.classList = 'field-cell';\n    }\n  }));\n};\n\nconst canMakeMove = boardArray => {\n  let canMove = false;\n\n  boardArray.forEach((row, rowInd) => row.forEach((value, colInd) => {\n    if (value !== 0) {\n      if (rowInd < 3 && value === boardArray[rowInd + 1][colInd]) {\n        canMove = true;\n      }\n\n      if (colInd < 3 && value === boardArray[rowInd][colInd + 1]) {\n        canMove = true;\n      }\n    }\n  }));\n\n  return canMove;\n};\n\nconst getWinMessage = boardArray => {\n  boardArray.forEach(row => row.forEach(cell => {\n    if (cell >= 2048) {\n      isWin = true;\n      message.Start.classList.remove('hidden');\n    }\n  }));\n};\n\nconst getLoseMessage = boardArray => {\n  if (isBoardFull(boardArray) && !canMakeMove(boardArray)) {\n    message.Lose.classList.remove('hidden');\n  }\n};\n\nconst changeButton = () => {\n  startButton.classList += ' restart';\n  startButton.innerText = 'Restart';\n  startButton.style = 'border: 2px solid red; color: #776e65; outline: none;';\n  message.Start.classList.add('hidden');\n};\n\ndocument.addEventListener('keyup', e => {\n  if (!allowedKeys.includes(e.key) || isWin) {\n    return;\n  }\n\n  const prevBoard = JSON.parse(JSON.stringify(board));\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      slideLeft();\n      getWinMessage(board);\n      getLoseMessage(board);\n      break;\n    case 'ArrowRight':\n      slideRight();\n      getWinMessage(board);\n      getLoseMessage(board);\n      break;\n    case 'ArrowUp':\n      slideUp();\n      getWinMessage(board);\n      getLoseMessage(board);\n      break;\n    case 'ArrowDown':\n      slideDown();\n      getWinMessage(board);\n      getLoseMessage(board);\n      break;\n    default:\n      break;\n  }\n\n  document.querySelector('.game-score').innerText = score;\n\n  if (isMoved(prevBoard)) {\n    addRandomField(board);\n    drawBoard(board, cells);\n  }\n});\n\nconst isMoved = prevBoard => {\n  return prevBoard.some((prRow, rowInd) => prRow.some((prevCell, colInd) => {\n    return prevCell !== board[rowInd][colInd];\n  }));\n};\n\nconst deleteZeros = row => row.filter(Boolean);\n\nconst slide = row => {\n  const rowClear = deleteZeros(row);\n  let newRow = rowClear;\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n  newRow = deleteZeros(newRow);\n\n  while (newRow.length < 4) {\n    newRow.push(0);\n  }\n\n  return newRow;\n};\n\nconst slideLeft = () => {\n  board = board.map(row => slide(row));\n};\n\nconst slideRight = () => {\n  board = board.map(row => slide(row.reverse()).reverse());\n};\n\nconst getReversedBoard = boardArray => {\n  return boardArray.map((row, rowInd, boardArr) => row.map((_, colInd) => {\n    return boardArr[colInd][rowInd];\n  }));\n};\n\nconst slideUp = () => {\n  board = getReversedBoard(getReversedBoard(board).map(c => slide(c)));\n};\n\nconst slideDown = () => {\n  board = getReversedBoard(\n    getReversedBoard(board).map(r => slide(r.reverse()).reverse()),\n  );\n};\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","board","score","isWin","cells","document","querySelectorAll","startButton","getElementById","allowedKeys","message","Start","Lose","Win","addEventListener","resetGame","changeButton","addRandomField","drawBoard","querySelector","innerText","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","map","fill","classList","add","boardArray","emptyCells","forEach","row","rowIndex","value","colIndex","push","randomIndex","Math","floor","random","randomCell","curCells","rowInd","colInd","cell","textContent","concat","canMakeMove","canMove","getWinMessage","remove","getLoseMessage","boardArr","every","r","c","style","e","includes","key","prevBoard","JSON","parse","stringify","slideLeft","slideRight","slideUp","slideDown","isMoved","some","prRow","prevCell","deleteZeros","filter","Boolean","slide","newRow","reverse","getReversedBoard","_"],"version":3,"file":"index.1acd069b.js.map"}